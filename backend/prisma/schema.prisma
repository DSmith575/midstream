// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum Gender {
//   MALE
//   FEMALE
//   OTHER
//   PREFER_NOT_TO_SAY
// }

// enum ReferralStatus {
//   SUBMITTED
//   VIEWED
//   REVIEWED
//   APPROVED
//   REJECTED
// }

enum UserRole {
  CLIENT
  WORKER
  ADMIN
  MIDSTREAM
}

model User {
  id                  Int                  @id @default(autoincrement())
  companyId           Int?
  googleId            String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  contactInformation  ContactInformation?
  personalInformation PersonalInformation?
  addressInformation  AddressInformation?
  createdReferrals    ReferralForm[]       @relation("CreatedReferrals")
  assignedReferrals   ReferralForm[]       @relation("AssignedReferrals")
  casesCompleted      Int?                 @default(0)
  casesAssigned       Int?                 @default(0)
  role                UserRole             @default(CLIENT)
  company             Company?             @relation(fields: [companyId], references: [id])
}

model ContactInformation {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model PersonalInformation {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  firstName     String
  lastName      String
  title         String?
  gender        String
  preferredName String?
  dateOfBirth   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model AddressInformation {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  address   String
  suburb    String
  city      String
  postCode  Int
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ReferralForm {
  id                      Int                    @id @default(autoincrement())
  companyId               Int // new field!
  userId                  Int
  assignedToWorkerId      Int?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @default(now()) @updatedAt
  status                  String                 @default("SUBMITTED")
  communicationId         Int                    @unique
  medicalId               Int                    @unique
  disabilityId            Int                    @unique
  referrerId              Int                    @unique
  emergencyContactId      Int                    @unique
  consentId               Int                    @unique
  additionalInformationId Int                    @unique
  user                    User                   @relation("CreatedReferrals", fields: [userId], references: [id])
  assignedToWorker        User?                  @relation("AssignedReferrals", fields: [assignedToWorkerId], references: [id])
  referrer                Referrer               @relation(fields: [referrerId], references: [id])
  emergencyContact        EmergencyContact       @relation(fields: [emergencyContactId], references: [id])
  communication           ReferralCommunication  @relation(fields: [communicationId], references: [id])
  medical                 ReferralMedical        @relation(fields: [medicalId], references: [id])
  disability              ReferralDisability     @relation(fields: [disabilityId], references: [id])
  consent                 ReferralConsent        @relation(fields: [consentId], references: [id])
  additionalInformation   AdditionalInformation? @relation(fields: [additionalInformationId], references: [id])
  company                 Company?               @relation(fields: [companyId], references: [id]) // new relation
}

model ReferralCommunication {
  id                        Int           @id @default(autoincrement())
  firstLanguage             String
  interpreter               Boolean
  culturalSupport           Boolean?
  communicationNeeds        Boolean?
  communicationNeedsDetails String?
  referral                  ReferralForm?
}

model AdditionalInformation {
  id                        Int           @id @default(autoincrement())
  safety                    String
  otherImportantInformation String?
  referral                  ReferralForm?
}

model ReferralMedical {
  id            Int           @id @default(autoincrement())
  doctorName    String
  doctorPhone   String
  doctorAddress String
  doctorSuburb  String
  doctorCity    String
  nhiNumber     String
  referral      ReferralForm?
}

model ReferralDisability {
  id                          Int           @id @default(autoincrement())
  disabilityType              String
  disabilityDetails           String?
  disabilitySupportDetails    String?
  disabilityReasonForReferral String?
  disabilitySupportRequired   String?
  referral                    ReferralForm?
}

model Referrer {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String?
  phone        String
  relationship String
  referrals    ReferralForm[]
}

model EmergencyContact {
  id           Int            @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String
  email        String?
  relationship String
  referrals    ReferralForm[]
}

model ReferralConsent {
  id                              Int           @id @default(autoincrement())
  provideInformationConsent       Boolean
  provideSharedInformationConsent Boolean
  provideContactConsent           Boolean
  provideStatisticalConsent       Boolean
  provideCorrectInformation       Boolean
  referral                        ReferralForm?
}

model Company {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  city      String
  address   String
  suburb    String
  postCode  Int
  country   String
  phone     String
  email     String         @unique
  website   String?        
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  users     User[] // one company has many users
  referrals ReferralForm[]
}
